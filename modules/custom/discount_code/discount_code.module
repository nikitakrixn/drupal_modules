<?php

/**
 * @file
 * Contains hooks for the message output module.
 */

use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_user_login().
 */
function discount_code_user_login(UserInterface $account) {
  $current_route = \Drupal::routeMatch()->getRouteName();
  $destination = \Drupal::request()->query->get('destination');
  if ($destination && $destination != '/user/login') {
    return;
  }

  if (!in_array($current_route, ['user.reset', 'user.reset.login'])) {
    // Redirect user on login with message.
    $messenger = \Drupal::messenger();
    $message = \Drupal::config('discount_code.settings')
      ->get('message');

    $token = Drupal::token();

    // Print account name and discount code using token.
    $print_username = $token->replace('[current-user:account-name]');
    $print_discount_code = $token->replace('[discount_code:code]');
    $username_variables = ['%username' => $print_username, '%discount_code' => $print_discount_code];

    // Redirect to my page info.
    $homeResponse = new RedirectResponse(URL::fromUserInput('/info')->toString());
    $homeResponse->send();

    // Add message with variables.
    $messenger->addMessage(t($message,$username_variables));
  }
}

/**
 * Implements hook_token_info().
 */
function discount_code_token_info() {
  $info = [];
  $info['types']['discount_code'] = ['name' => t('Discount Code'), 'description' => t('Discount code for user')];
  $info['tokens']['discount_code']['code'][] = 'text by test for output bla bla bla.';
  return $info;
}

/**
 * Implements hook_tokens().
 */
function discount_code_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'discount_code') {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'code':
          $replacements[$original] = '1232348892489';
          break;
      }
    }
  }
  return $replacements;
}
